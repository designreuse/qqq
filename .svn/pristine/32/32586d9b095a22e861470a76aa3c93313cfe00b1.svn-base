<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">

		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${c3p0.maximum.connection.count}"></property>

		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${c3p0.minimum.connection.count}"></property>

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="${c3p0.maxStatements}"></property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"></property>

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}"></property>

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭。Default: 
			false -->
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}"></property>

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"></property>

	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 一个HibernateDialect类名允许Hibernate针对特定的关系数据库生成优化的SQL -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>

				<!-- 输出所有SQL语句到控制台 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>

				<!-- 在log和console中打印出的SQL格式化 -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>

				<!-- 指定JDBC抓取数量的大小 -->
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>

				<!-- 允许Hibernate使用JDBC2的批量更新，取值建议 5到 30 之间 -->
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>

				<!-- 设置hibernate在连接数据库时的读取编码 -->
				<prop key="hibernate.connection.characterEncoding">
					${hibernate.connection.characterEncoding}
				</prop>

				<!-- 为当前的hiernate session 指定一个(自定义的)策略 -->
				<prop key="hibernate.current_session_context_class">
					${hibernate.current_session_context_class}
				</prop>

				<prop key="hibernate.cache.use_second_level_cache">
					${hibernate.cache.use_second_level_cache}
				</prop>

				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- <prop key="hibernate.current_session_context_class">thread</prop> -->
			</props>
		</property>
		<!-- <property name="mappingLocations"> <list> <value>classpath:com/oki/insure/core/entity/*.hbm.xml 
			</value> </list> </property> -->
		<property name="packagesToScan">
			<list>
				<value>project.edge.domain.entity</value>
			</list>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Exception translation bean post processor -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />


	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<!-- <aop:config proxy-target-class="true"> <aop:pointcut id="serviceMethod" expression=" execution(* 
		com.mt.mtstar.service..*(..))" /> <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" /> 
		</aop:config> <tx:advice id="txAdvice" transaction-manager="transactionManager"> <tx:attributes> <tx:method 
		name="*" /> </tx:attributes> </tx:advice> -->

	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>  
